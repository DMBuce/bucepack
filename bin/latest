#!/bin/bash -e

# rough sketch of downloaded metadata and assets:
#
# - .../version_manifest.json                       -> cache/version_manifest.json
#   - .latest.release:            $version          -> cache/latest.txt
#   - .versions[id==$latest].url: .../$version.json -> cache/$version.json
#     - .downloads.client.url:    .../client.jar    -> cache/$version.jar
#     - .assetIndex.url:          .../[0-9].json    -> $version.jar/index.json
#       - .objects."minecraft/sounds.json".hash: $soundhash -> $version.jar/assets/minecraft/sounds.json
#
# each level of indentation represents a new file found using json data
# in the previous one
#
# ".../" represents a piston-meta or piston-data url:
# https://gist.github.com/skyrising/95a8e6a7287634e097ecafa2f21c240f
#
#
#
# filesystem layout:
#
# .   ...................................... git root
# ├── cache/   ............................. folder used by build system scripts
# │   ├── version_manifest.json   .......... info about all versions
# │   ├── latest.txt   ..................... stores version of latest release
# │   ├── $version.jar   ................... client jar
# │   └── $version.json   .................. version download info
# └── $version.jar/   ...................... assets unpacked from vanilla jar
#     ├── index.json   ..................... asset index
#     └── assets/minecraft/sounds.json   ... sounds.json

# check if a file does not exist or is over a day old
stale() {
	[[ ! -f "$1" ]] || find "$1" -mtime +1 | grep -q .
}

# update version manifest if necessary
mkdir -p cache
if stale cache/version_manifest.json; then
	curl -s -o cache/version_manifest.json 'https://piston-meta.mojang.com/mc/game/version_manifest.json'
fi

# update latest version if necessary
if stale cache/latest.txt; then
	jq -r .latest.release cache/version_manifest.json > cache/latest.txt
fi

# update version info if necessary
latest="$(<cache/latest.txt)"
if stale "cache/$latest.json"; then
	url="$(jq -r ".versions[]|select(.id==\"$latest\").url" cache/version_manifest.json)"
	curl -s -o "cache/$latest.json" "$url"
fi

# update jar if necessary
if stale "cache/$latest.jar"; then
	jarurl="$(jq -r '.downloads.client.url' "cache/$latest.json")"
	curl -s -o "cache/$latest.jar" "$jarurl"
fi

# create folder with jar contents if necessary
if [[ ! -d "$latest.jar" ]]; then
	mkdir -p "$latest.jar"
	cd "$latest.jar"

	# unpack jar
	jar xf "../cache/$latest.jar" assets data version.json
	rm */.mcassetsroot
	cd -
fi

# update asset index if necessary
if stale "$latest.jar/index.json"; then
	idxurl="$(jq -r '.assetIndex.url' "cache/$latest.json")"
	curl -s -o "$latest.jar/index.json" "$idxurl"
fi

# update sounds.json if necessary
# https://wiki.vg/Game_files#Assets
if stale "$latest.jar/assets/minecraft/sounds.json"; then
	soundhash="$(jq -r '.objects."minecraft/sounds.json".hash' "$latest.jar/index.json")"
	curl -s -o "$latest.jar/assets/minecraft/sounds.json" "https://resources.download.minecraft.net/${soundhash:0:2}/$soundhash"
fi

# copy missing data files from mcmeta repo
cd ../mcmeta
branch="$(git branch --show-current)"
if [[ $branch != $latest-data ]]; then
	git fetch --tags
	git checkout -b "$latest-data" "$latest-data"
	cd -
	rsync -a ../mcmeta/data/minecraft/dimension/ "$latest.jar/data/minecraft/dimension/"
fi

# print latest version
echo "$latest"

